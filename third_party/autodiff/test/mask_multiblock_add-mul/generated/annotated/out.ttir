module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32>, %arg4: !tt.ptr<f32>, %arg5: !tt.ptr<f32>) attributes {noinline = false} {
    %0 = tt.splat %arg2 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %1 = tt.get_program_id x {autogradVisited = true, isCloned = true} : i32
    %c4_i32 = arith.constant {autogradVisited = true, isCloned = true} 4 : i32
    %2 = arith.muli %1, %c4_i32 {autogradVisited = true, isCloned = true} : i32
    %3 = tt.splat %2 {autogradVisited = true, isCloned = true} : i32 -> tensor<4xi32>
    %4 = tt.make_range {autogradVisited = true, end = 4 : i32, isCloned = true, start = 0 : i32} : tensor<4xi32>
    %5 = arith.addi %3, %4 {autogradVisited = true, isCloned = true} : tensor<4xi32>
    %6 = tt.addptr %0, %5 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %7 = tt.splat %arg0 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %8 = tt.addptr %7, %5 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %cst = arith.constant {autogradVisited = true, isCloned = true} dense<10> : tensor<4xi32>
    %9 = arith.cmpi slt, %5, %cst {autogradVisited = true, isCloned = true} : tensor<4xi32>
    %10 = tt.load %8, %9 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %cst_0 = arith.constant {autogradVisited = true, isCloned = true} dense<5.000000e-01> : tensor<4xf32>
    %11 = arith.addf %10, %cst_0 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %12 = tt.splat %arg1 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %13 = tt.addptr %12, %5 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %14 = tt.load %13, %9 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %15 = arith.mulf %11, %14 {autogradVisited = true, isCloned = true} : tensor<4xf32>

    //////////////
    // backward //
    //////////////

    // masked load upstream
    %16 = tt.splat %arg5 {autogradVisited = true, isGradPtrRebase = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %17 = tt.addptr %16, %5 {autogradVisited = true, isGradPtrRebase = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %18 = tt.load %17, %9 {autogradVisited = true, isInserted = true} : tensor<4x!tt.ptr<f32>>

    // b grad: x * upstream
    %19 = arith.mulf %11, %18 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // x grad: b * upstream
    %20 = arith.mulf %14, %18 {autogradVisited = true, isInserted = true} : tensor<4xf32>

    // masked store: b grad into b_grad_ptr
    //  1) apply transformations (which were originally applied to b_ptr) to b_grad_ptr
    %21 = tt.splat %arg4 {autogradVisited = true, isGradPtrRebase = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %22 = tt.addptr %21, %5 {autogradVisited = true, isGradPtrRebase = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    //  2) store grad
    %23 = tt.atomic_rmw fadd, acq_rel, gpu, %22, %19, %9 {autogradVisited = true, gradOf = "%32 = tt.load %31, %26 : tensor<4x!tt.ptr<f32>>", isInserted = true} : (tensor<4x!tt.ptr<f32>>, tensor<4xf32>, tensor<4xi1>) -> tensor<4xf32>


    // masked store: x grad into a ptr (skipping multiplication by 1, for add bwd)
    //  1) apply transformations (which were originally applied to a_ptr) to x_grad_ptr
    %24 = tt.splat %arg3 {autogradVisited = true, isGradPtrRebase = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %25 = tt.addptr %24, %5 {autogradVisited = true, isGradPtrRebase = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    //  2) store grad
    %26 = tt.atomic_rmw fadd, acq_rel, gpu, %25, %20, %9 {autogradVisited = true, gradOf = "%29 = tt.load %28, %26 : tensor<4x!tt.ptr<f32>>", isInserted = true} : (tensor<4x!tt.ptr<f32>>, tensor<4xf32>, tensor<4xi1>) -> tensor<4xf32>
    tt.return
  }
}

