module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    // get pointer for c
    %0 = tt.splat %arg2 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %1 = tt.make_range {autogradVisited = true, end = 4 : i32, isCloned = true, start = 0 : i32} : tensor<4xi32>
    %2 = tt.addptr %0, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>

    // load a
    %3 = tt.splat %arg0 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %4 = tt.addptr %3, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %5 = tt.load %4 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>

    // load b
    %6 = tt.splat %arg1 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %7 = tt.addptr %6, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %8 = tt.load %7 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>

    %9 = arith.divf %5, %8 {autogradVisited = true, isCloned = true} : tensor<4xf32>

    // *******************
    // **** backward *****
    // *******************

    // load upstream
    %10 = tt.load %2 {autogradVisited = true, isInserted = true} : tensor<4x!tt.ptr<f32>>

    // ones
    %cst = arith.constant {autogradVisited = true, isInserted = true} 1.000000e+00 : f32
    %11 = tt.splat %cst {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    // a local
    %12 = arith.divf %11, %8 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // a downstream
    %13 = arith.mulf %12, %10 {autogradVisited = true, isInserted = true} : tensor<4xf32>

    // pow
    %14 = arith.mulf %8, %8 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // div
    %15 = arith.divf %5, %14 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // neg
    %cst_0 = arith.constant {autogradVisited = true, isInserted = true} -1.000000e+00 : f32
    %16 = tt.splat %cst_0 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    // b local
    %17 = arith.mulf %16, %15 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // b downstream
    %18 = arith.mulf %17, %10 {autogradVisited = true, isInserted = true} : tensor<4xf32>

    // store b downstream
    tt.store %7, %18 {autogradVisited = true, gradOf = "%17 = tt.load %16 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    // store store a downstream
    tt.store %4, %13 {autogradVisited = true, gradOf = "%14 = tt.load %13 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    tt.return
  }
}
