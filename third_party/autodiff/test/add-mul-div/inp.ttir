module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %0 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>

    // load a
    %1 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %2 = tt.addptr %1, %0 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %3 = tt.load %2 : tensor<4x!tt.ptr<f32>>

    // load b
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %5 = tt.addptr %4, %0 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %6 = tt.load %5 : tensor<4x!tt.ptr<f32>>

    // load c
    %7 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %8 = tt.addptr %7, %0 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %9 = tt.load %8 : tensor<4x!tt.ptr<f32>>

    // x = a + 0.5
    %cst = arith.constant dense<5.000000e-01> : tensor<4xf32>
    %10 = arith.addf %3, %cst : tensor<4xf32>

    // y = x * b
    %11 = arith.mulf %10, %6 : tensor<4xf32>

    // z = y / c
    %12 = arith.divf %11, %9 : tensor<4xf32>

    // store z in output ptr
    %13 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %14 = tt.addptr %13, %0 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    tt.store %14, %12 : tensor<4x!tt.ptr<f32>>

    tt.return
  }
}