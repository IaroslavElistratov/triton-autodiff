import numpy as np

import torch
DEVICE = torch.device("cuda:0")

import triton
from triton.compiler import compile
from triton.backends.compiler import GPUTarget


target = GPUTarget("cuda", arch=89, warp_size=32)
bwd_kernel = compile("out.ttir", target=target)

def bwd(a, b, upstream):
    assert a.device == DEVICE and b.device == DEVICE and upstream.device == DEVICE
    grid = (1, 1, 1)
    return bwd_kernel[grid](a, b, upstream)

np_a = np.array([
    [0.4963, 0.7682, 0.0885, 0.1320, 0.3074, 0.6341, 0.4901, 0.8964, 0.4556, 0.6323, 0.3489, 0.4017, 0.0223, 0.1689, 0.2939, 0.5185],
    [0.6977, 0.8000, 0.1610, 0.2823, 0.6816, 0.9152, 0.3971, 0.8742, 0.4194, 0.5529, 0.9527, 0.0362, 0.1852, 0.3734, 0.3051, 0.9320],
    [0.1759, 0.2698, 0.1507, 0.0317, 0.2081, 0.9298, 0.7231, 0.7423, 0.5263, 0.2437, 0.5846, 0.0332, 0.1387, 0.2422, 0.8155, 0.7932],
    [0.2783, 0.4820, 0.8198, 0.9971, 0.6984, 0.5675, 0.8352, 0.2056, 0.5932, 0.1123, 0.1535, 0.2417, 0.7262, 0.7011, 0.2038, 0.6511],
    [0.7745, 0.4369, 0.5191, 0.6159, 0.8102, 0.9801, 0.1147, 0.3168, 0.6965, 0.9143, 0.9351, 0.9412, 0.5995, 0.0652, 0.5460, 0.1872],
    [0.0340, 0.9442, 0.8802, 0.0012, 0.5936, 0.4158, 0.4177, 0.2711, 0.6923, 0.2038, 0.6833, 0.7529, 0.8579, 0.6870, 0.0051, 0.1757],
    [0.7497, 0.6047, 0.1100, 0.2121, 0.9704, 0.8369, 0.2820, 0.3742, 0.0237, 0.4910, 0.1235, 0.1143, 0.4725, 0.5751, 0.2952, 0.7967],
    [0.1957, 0.9537, 0.8426, 0.0784, 0.3756, 0.5226, 0.5730, 0.6186, 0.6962, 0.5300, 0.2560, 0.7366, 0.0204, 0.2036, 0.3748, 0.2564],
    [0.3251, 0.0902, 0.3936, 0.6069, 0.1743, 0.4743, 0.8579, 0.4486, 0.5139, 0.4569, 0.6012, 0.8179, 0.9736, 0.8175, 0.9747, 0.4638],
    [0.0508, 0.2630, 0.8405, 0.4968, 0.2515, 0.1168, 0.0321, 0.0780, 0.3986, 0.7742, 0.7703, 0.0178, 0.8119, 0.1087, 0.3943, 0.2973],
    [0.4037, 0.4018, 0.0513, 0.0683, 0.4218, 0.5065, 0.2729, 0.6883, 0.0500, 0.4663, 0.9397, 0.2961, 0.9515, 0.6811, 0.0488, 0.8163],
    [0.4423, 0.2768, 0.8998, 0.0960, 0.5537, 0.3953, 0.8571, 0.6396, 0.7403, 0.6766, 0.3798, 0.3948, 0.0880, 0.7709, 0.8970, 0.8421],
    [0.1473, 0.5223, 0.1475, 0.2248, 0.2086, 0.6709, 0.2020, 0.4891, 0.5210, 0.8223, 0.1220, 0.1567, 0.2097, 0.8500, 0.3203, 0.9217],
    [0.6808, 0.5633, 0.4963, 0.4012, 0.5627, 0.3858, 0.4965, 0.5638, 0.1089, 0.2379, 0.9037, 0.0942, 0.4641, 0.9946, 0.6806, 0.5142],
    [0.0667, 0.7477, 0.1439, 0.3581, 0.3322, 0.4260, 0.5055, 0.9124, 0.5624, 0.9478, 0.8059, 0.1839, 0.7243, 0.1466, 0.2881, 0.6471],
    [0.6651, 0.8751, 0.3390, 0.5008, 0.7574, 0.0165, 0.8615, 0.0865, 0.5069, 0.4150, 0.2367, 0.5661, 0.9135, 0.3538, 0.2032, 0.3151],
])

np_b = np.array([
    [0.0044, 0.7257, 0.2599, 0.1663, 0.2119, 0.7875, 0.7648, 0.8838, 0.6814, 0.3330, 0.3603, 0.6477, 0.9110, 0.6359, 0.2634, 0.2650],
    [0.0273, 0.6080, 0.2194, 0.0542, 0.9384, 0.1753, 0.4431, 0.6432, 0.5159, 0.1636, 0.0958, 0.8985, 0.5814, 0.9148, 0.3324, 0.6473],
    [0.3857, 0.4778, 0.1955, 0.6691, 0.6581, 0.4897, 0.3875, 0.1918, 0.8458, 0.1278, 0.7048, 0.3319, 0.2588, 0.5898, 0.2403, 0.6152],
    [0.5982, 0.1288, 0.5832, 0.7130, 0.6979, 0.4371, 0.0901, 0.4229, 0.6737, 0.3176, 0.6898, 0.8330, 0.2389, 0.5049, 0.7067, 0.5392],
    [0.5418, 0.5624, 0.1069, 0.5393, 0.8462, 0.9506, 0.7939, 0.5670, 0.7335, 0.2568, 0.0857, 0.0700, 0.9988, 0.8174, 0.1544, 0.6956],
    [0.8776, 0.9998, 0.9372, 0.8874, 0.3854, 0.3245, 0.9105, 0.7802, 0.1991, 0.9495, 0.7416, 0.7726, 0.1866, 0.6434, 0.3247, 0.8907],
    [0.4100, 0.6947, 0.5888, 0.7127, 0.3301, 0.7438, 0.1508, 0.6129, 0.1617, 0.0067, 0.0985, 0.8947, 0.7705, 0.9691, 0.9006, 0.0535],
    [0.1588, 0.4192, 0.1753, 0.8472, 0.1220, 0.2560, 0.0170, 0.2161, 0.9112, 0.9094, 0.8579, 0.8861, 0.9446, 0.3720, 0.7200, 0.9455],
    [0.6654, 0.9998, 0.7593, 0.8108, 0.3250, 0.7399, 0.5575, 0.3806, 0.2181, 0.2194, 0.1153, 0.8357, 0.8555, 0.4431, 0.2107, 0.8865],
    [0.8197, 0.5372, 0.2639, 0.9595, 0.7045, 0.1204, 0.9785, 0.8797, 0.3178, 0.7811, 0.2159, 0.4216, 0.9246, 0.5207, 0.1464, 0.3329],
    [0.3643, 0.4035, 0.5479, 0.9624, 0.5268, 0.1913, 0.5256, 0.7397, 0.7480, 0.0430, 0.4105, 0.1284, 0.2867, 0.6801, 0.1449, 0.6859],
    [0.9244, 0.5328, 0.1668, 0.3209, 0.6092, 0.1188, 0.7484, 0.0461, 0.0194, 0.0142, 0.3986, 0.8362, 0.0268, 0.9156, 0.3000, 0.6464],
    [0.5228, 0.0491, 0.9147, 0.7692, 0.9970, 0.7526, 0.1700, 0.9173, 0.5269, 0.7371, 0.0991, 0.3562, 0.0091, 0.3053, 0.6079, 0.1074],
    [0.6594, 0.7684, 0.5697, 0.1655, 0.1123, 0.3457, 0.7195, 0.9932, 0.7875, 0.4437, 0.6753, 0.0095, 0.0729, 0.7333, 0.2168, 0.7405],
    [0.1470, 0.2523, 0.0882, 0.7609, 0.4491, 0.8848, 0.8094, 0.7767, 0.5161, 0.3454, 0.3913, 0.5665, 0.7479, 0.1497, 0.9196, 0.4456],
    [0.0810, 0.2295, 0.9424, 0.9573, 0.0369, 0.8526, 0.7506, 0.7960, 0.9233, 0.2305, 0.6579, 0.7046, 0.3523, 0.6673, 0.3561, 0.8091],
])


a = torch.from_numpy(np_a).to(dtype=torch.float32, device='cuda:0')
b = torch.from_numpy(np_b).to(dtype=torch.float32, device='cuda:0')
upstream = torch.ones(a.shape[0], b.shape[1]).to(dtype=torch.float32, device='cuda:0')
_compiled_kernel = bwd(a, b, upstream)

print("grad a[:3, :3]: ", a[:3, :3])
print("grad b[:3, :3]: ", b[:3, :3])
print()

# compare with pytorch

torch_a = torch.from_numpy(np_a).to(device='cuda:0')
torch_a.requires_grad = True
torch_b = torch.from_numpy(np_b).to(device='cuda:0')
torch_b.requires_grad = True

torch_output = torch_a @ torch_b
torch_output.backward(torch.ones_like(torch_output))

print("torch grad a[:3, :3]: ", torch_a.grad[:3, :3])
print()

print("torch grad b[:3, :3]: ", torch_b.grad[:3, :3])
print()


if torch.allclose(a, torch_a.grad.to(dtype=torch.float32), atol=1e-2, rtol=0):
    print("✅ Triton and Torch match")
else:
    print("❌ Triton and Torch differ")

if torch.allclose(b, torch_b.grad.to(dtype=torch.float32), atol=1e-2, rtol=0):
    print("✅ Triton and Torch match")
else:
    print("❌ Triton and Torch differ")
