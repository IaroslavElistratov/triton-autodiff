module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %0 = tt.splat %arg3 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %1 = tt.make_range {autogradVisited = true, end = 4 : i32, isCloned = true, start = 0 : i32} : tensor<4xi32>
    %2 = tt.addptr %0, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %3 = tt.splat %arg0 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %4 = tt.addptr %3, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %5 = tt.load %4 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %cst = arith.constant {autogradVisited = true, isCloned = true} dense<5.000000e-01> : tensor<4xf32>
    %6 = arith.addf %5, %cst {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %7 = tt.splat %arg1 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %8 = tt.addptr %7, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %9 = tt.load %8 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %10 = arith.mulf %6, %9 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %11 = tt.splat %arg2 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %12 = tt.addptr %11, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %13 = tt.load %12 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %14 = arith.divf %10, %13 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %15 = math.cos %14 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %16 = math.sin %15 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %17 = math.sqrt %16 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %18 = math.log %17 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %19 = math.exp %18 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    %20 = tt.load %2 {autogradVisited = true, isInserted = true} : tensor<4x!tt.ptr<f32>>
    %21 = arith.mulf %19, %20 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %cst_0 = arith.constant {autogradVisited = true, isInserted = true} 1.000000e+00 : f32
    %22 = tt.splat %cst_0 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    %23 = arith.divf %22, %17 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %24 = arith.mulf %23, %21 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %cst_1 = arith.constant {autogradVisited = true, isInserted = true} 2.000000e+00 : f32
    %25 = tt.splat %cst_1 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    %26 = arith.mulf %17, %25 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %cst_2 = arith.constant {autogradVisited = true, isInserted = true} 1.000000e+00 : f32
    %27 = tt.splat %cst_2 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    %28 = arith.divf %27, %26 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %29 = arith.mulf %28, %24 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %30 = math.cos %15 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %31 = arith.mulf %30, %29 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %32 = math.sin %14 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %cst_3 = arith.constant {autogradVisited = true, isInserted = true} -1.000000e+00 : f32
    %33 = tt.splat %cst_3 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    %34 = arith.mulf %33, %32 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %35 = arith.mulf %34, %31 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %cst_4 = arith.constant {autogradVisited = true, isInserted = true} 1.000000e+00 : f32
    %36 = tt.splat %cst_4 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    %37 = arith.divf %36, %13 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %38 = arith.mulf %37, %35 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %39 = arith.mulf %6, %38 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %40 = arith.mulf %9, %38 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %41 = arith.mulf %13, %13 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %42 = arith.divf %10, %41 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %cst_5 = arith.constant {autogradVisited = true, isInserted = true} -1.000000e+00 : f32
    %43 = tt.splat %cst_5 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    %44 = arith.mulf %43, %42 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    %45 = arith.mulf %44, %35 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    tt.store %12, %45 {autogradVisited = true, gradOf = "%55 = tt.load %54 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    tt.store %8, %39 {autogradVisited = true, gradOf = "%52 = tt.load %51 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    tt.store %4, %40 {autogradVisited = true, gradOf = "%49 = tt.load %48 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    tt.return
  }
}

