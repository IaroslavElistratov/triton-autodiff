module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32

    %0 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>

    %1 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %2 = tt.addptr %1, %0 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %3 = tt.load %2 : tensor<4x!tt.ptr<f32>>

    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %5 = tt.addptr %4, %0 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %6 = tt.load %5 : tensor<4x!tt.ptr<f32>>

    %7 = scf.for %arg2 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg3 = %6) -> (tensor<4xf32>)  : i32 {
      %8 = arith.sitofp %arg2 : i32 to f32
      %9 = tt.splat %8 : f32 -> tensor<4xf32>
      %10 = arith.mulf %3, %9 : tensor<4xf32>
      %11 = arith.addf %arg3, %10 : tensor<4xf32>
      scf.yield %11 : tensor<4xf32>
    }
    tt.store %5, %7 : tensor<4x!tt.ptr<f32>>
    tt.return
  }
}



