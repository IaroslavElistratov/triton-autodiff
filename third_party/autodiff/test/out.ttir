module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %0 = tt.splat %arg2 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %1 = tt.make_range {autogradVisited = true, end = 4 : i32, isCloned = true, start = 0 : i32} : tensor<4xi32>
    %2 = tt.addptr %0, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %3 = tt.splat %arg0 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %4 = tt.addptr %3, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %5 = tt.load %4 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %6 = tt.splat %arg1 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %7 = tt.addptr %6, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %8 = tt.load %7 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %9 = arith.divf %5, %8 {autogradVisited = true, isCloned = true} : tensor<4xf32>
    tt.store %2, %9 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>
    %10 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %12 = tt.addptr %11, %10 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %13 = tt.load %12 : tensor<4x!tt.ptr<f32>>
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %15 = tt.addptr %14, %10 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %16 = tt.load %15 : tensor<4x!tt.ptr<f32>>
    %17 = arith.divf %13, %16 : tensor<4xf32>
    %18 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %19 = tt.addptr %18, %10 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    tt.store %19, %17 : tensor<4x!tt.ptr<f32>>
    tt.return
  }
}

