module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    // get pointer for c
    %0 = tt.splat %arg2 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %1 = tt.make_range {autogradVisited = true, end = 4 : i32, isCloned = true, start = 0 : i32} : tensor<4xi32>
    %2 = tt.addptr %0, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>

    // load a
    %3 = tt.splat %arg0 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %4 = tt.addptr %3, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %5 = tt.load %4 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>

    // load b
    %6 = tt.splat %arg1 {autogradVisited = true, isCloned = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %7 = tt.addptr %6, %1 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %8 = tt.load %7 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>

    %9 = arith.divf %5, %8 {autogradVisited = true, isCloned = true} : tensor<4xf32>

    // write into c ptr
    // todo: this overwrite upstream
    tt.store %2, %9 {autogradVisited = true, isCloned = true} : tensor<4x!tt.ptr<f32>>


    // *******************
    // **** backward *****
    // *******************

    // load upstream
    %10 = tt.make_range {autogradVisited = true, end = 4 : i32, isOrig = true, start = 0 : i32} : tensor<4xi32>
    %11 = tt.splat %arg2 {autogradVisited = true, isOrig = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %12 = tt.addptr %11, %10 {autogradVisited = true, isOrig = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %13 = tt.load %12 {autogradVisited = true, isInserted = true} : tensor<4x!tt.ptr<f32>>

    // a ptr
    %14 = tt.splat %arg0 {autogradVisited = true, isOrig = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %15 = tt.addptr %14, %10 {autogradVisited = true, isOrig = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>

    // b ptr
    %16 = tt.splat %arg1 {autogradVisited = true, isOrig = true} : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %17 = tt.addptr %16, %10 {autogradVisited = true, isOrig = true} : tensor<4x!tt.ptr<f32>>, tensor<4xi32>

    // ones
    %cst = arith.constant {autogradVisited = true, isInserted = true} 1.000000e+00 : f32
    %18 = tt.splat %cst {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    // a local
    %19 = arith.divf %18, %8 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // a downstream
    %20 = arith.mulf %19, %13 {autogradVisited = true, isInserted = true} : tensor<4xf32>

    // pow
    %21 = arith.mulf %8, %8 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // div
    %22 = arith.divf %5, %21 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // neg
    %cst_0 = arith.constant {autogradVisited = true, isInserted = true} -1.000000e+00 : f32
    %23 = tt.splat %cst_0 {autogradVisited = true, isInserted = true} : f32 -> tensor<4xf32>
    // b local
    %24 = arith.mulf %23, %22 {autogradVisited = true, isInserted = true} : tensor<4xf32>
    // b downstream
    %25 = arith.mulf %24, %13 {autogradVisited = true, isInserted = true} : tensor<4xf32>

    // store b downstream
    tt.store %17, %25 {autogradVisited = true, gradOf = "%19 = tt.load %18 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    // store store a downstream
    tt.store %15, %20 {autogradVisited = true, gradOf = "%16 = tt.load %15 : tensor<4x!tt.ptr<f32>>", isInserted = true} : tensor<4x!tt.ptr<f32>>
    tt.return
  }
}
