module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<16x16xf32>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf32>
    %cst_1 = arith.constant dense<16> : tensor<16x1xi32>
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32>
    %2 = arith.muli %1, %cst_1 : tensor<16x1xi32>
    %3 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32>
    %4 = tt.broadcast %2 : tensor<16x1xi32> -> tensor<16x16xi32>
    %5 = tt.broadcast %3 : tensor<1x16xi32> -> tensor<16x16xi32>
    %6 = arith.addi %4, %5 : tensor<16x16xi32>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>>
    %8 = tt.addptr %7, %6 : tensor<16x16x!tt.ptr<f32>>, tensor<16x16xi32>
    %9 = tt.load %8 : tensor<16x16x!tt.ptr<f32>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>>
    %11 = tt.addptr %10, %6 : tensor<16x16x!tt.ptr<f32>>, tensor<16x16xi32>
    %12 = tt.load %11 : tensor<16x16x!tt.ptr<f32>>
    %13 = tt.dot %9, %12, %cst_0, inputPrecision = tf32 : tensor<16x16xf32> * tensor<16x16xf32> -> tensor<16x16xf32>
    %14 = arith.mulf %13, %cst : tensor<16x16xf32>
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>>
    %16 = tt.addptr %15, %6 : tensor<16x16x!tt.ptr<f32>>, tensor<16x16xi32>
    %17 = tt.load %16 : tensor<16x16x!tt.ptr<f32>>
    %18 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>>
    %19 = tt.addptr %18, %6 : tensor<16x16x!tt.ptr<f32>>, tensor<16x16xi32>
    %20 = tt.load %19 : tensor<16x16x!tt.ptr<f32>>
    %21 = tt.dot %17, %20, %14, inputPrecision = tf32 : tensor<16x16xf32> * tensor<16x16xf32> -> tensor<16x16xf32>
    %22 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>>
    %23 = tt.addptr %22, %6 : tensor<16x16x!tt.ptr<f32>>, tensor<16x16xi32>
    tt.store %23, %21 : tensor<16x16x!tt.ptr<f32>>
    tt.return
  }
}
