module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    // BLOCK_SIZE constexpr
    %c4_i32 = arith.constant 4 : i32
    // pid
    %0 = tt.get_program_id x : i32
    // block_start = pid * BLOCK_SIZE
    %1 = arith.muli %0, %c4_i32 : i32

    // offsets = block_start + tl.arange(0, BLOCK_SIZE)
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %3 = tt.splat %1 : i32 -> tensor<4xi32>
    %4 = arith.addi %3, %2 : tensor<4xi32>

    // load a
    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %6 = tt.addptr %5, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %7 = tt.load %6 : tensor<4x!tt.ptr<f32>>

    // load b
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %9 = tt.addptr %8, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %10 = tt.load %9 : tensor<4x!tt.ptr<f32>>

    // x = a + 0.5
    %cst = arith.constant dense<5.000000e-01> : tensor<4xf32>
    %11 = arith.addf %7, %cst : tensor<4xf32>

    // y = x * b
    %12 = arith.mulf %11, %10 : tensor<4xf32>

    // out ptr
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>>
    %14 = tt.addptr %13, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>

    tt.store %14, %12 : tensor<4x!tt.ptr<f32>>

    tt.return
  }
}


