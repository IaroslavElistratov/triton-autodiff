// BLOCK_M = 128
// BLOCK_N = 64

module {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c64_i64 = arith.constant 64 : i64
    %c0_i64 = arith.constant 0 : i64
    %c128_i32 = arith.constant 128 : i32
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128xf32>
    %cst_1 = arith.constant dense<-1.000000e+06> : tensor<128x64xf32>
    %c64_i32 = arith.constant 64 : i32
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32>
    %cst_3 = arith.constant 1.44269502 : f32
    %c0_i32 = arith.constant 0 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.extsi %arg6 : i32 to i64
    %3 = arith.muli %1, %2 : i64
    %4 = tt.addptr %arg0, %3 : !tt.ptr<f16>, i64
    %5 = arith.extsi %arg8 : i32 to i64
    %6 = tt.addptr %arg2, %3 : !tt.ptr<f16>, i64
    %7 = arith.extsi %arg14 : i32 to i64
    %8 = tt.addptr %arg1, %3 : !tt.ptr<f16>, i64
    %9 = arith.extsi %arg11 : i32 to i64
    %10 = tt.addptr %arg5, %3 : !tt.ptr<f16>, i64
    %11 = arith.extsi %arg17 : i32 to i64
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %14 = arith.mulf %arg3, %cst_3 : f32
    %15 = tt.splat %4 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>>
    %16 = arith.extsi %12 : tensor<128xi32> to tensor<128xi64>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<128xi64> -> tensor<128x1xi64>
    %18 = tt.splat %5 : i64 -> tensor<128x1xi64>
    %19 = arith.muli %17, %18 : tensor<128x1xi64>
    %20 = tt.broadcast %19 : tensor<128x1xi64> -> tensor<128x64xi64>
    %21 = arith.extsi %13 : tensor<64xi32> to tensor<64xi64>
    %22 = tt.expand_dims %21 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64>
    %23 = tt.broadcast %22 : tensor<1x64xi64> -> tensor<128x64xi64>
    %24 = arith.addi %20, %23 : tensor<128x64xi64>
    %25 = tt.addptr %15, %24 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi64>
    %26 = tt.load %25 : tensor<128x64x!tt.ptr<f16>>
    %27 = tt.splat %8 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>>
    %28 = tt.expand_dims %21 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64>
    %29 = tt.broadcast %28 : tensor<64x1xi64> -> tensor<64x64xi64>
    %30 = tt.splat %9 : i64 -> tensor<1x64xi64>
    %31 = tt.expand_dims %12 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32>
    %32 = tt.expand_dims %13 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32>
    %33 = tt.broadcast %31 : tensor<128x1xi32> -> tensor<128x64xi32>
    %34 = tt.splat %14 : f32 -> tensor<128x64xf32>
    %35 = tt.splat %6 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>>
    %36 = tt.splat %7 : i64 -> tensor<64x1xi64>
    %37 = tt.broadcast %22 : tensor<1x64xi64> -> tensor<64x64xi64>
    %38:5 = scf.for %arg19 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg20 = %cst, %arg21 = %cst_2, %arg22 = %cst_0, %arg23 = %c0_i64, %arg24 = %c0_i64) -> (tensor<128xf32>, tensor<128x64xf32>, tensor<128xf32>, i64, i64)  : i32 {
      %55 = tt.splat %arg24 : i64 -> tensor<64xi64>
      %56 = arith.addi %55, %21 : tensor<64xi64>
      %57 = tt.expand_dims %56 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64>
      %58 = arith.muli %57, %30 : tensor<1x64xi64>
      %59 = tt.broadcast %58 : tensor<1x64xi64> -> tensor<64x64xi64>
      %60 = arith.addi %29, %59 : tensor<64x64xi64>
      %61 = tt.addptr %27, %60 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64>
      %62 = tt.load %61 : tensor<64x64x!tt.ptr<f16>>
      %63 = tt.dot %26, %62, %cst_2, inputPrecision = tf32 : tensor<128x64xf16> * tensor<64x64xf16> -> tensor<128x64xf32>
      %64 = tt.splat %arg19 : i32 -> tensor<1x64xi32>
      %65 = arith.addi %64, %32 : tensor<1x64xi32>
      %66 = tt.broadcast %65 : tensor<1x64xi32> -> tensor<128x64xi32>
      %67 = arith.cmpi sge, %33, %66 : tensor<128x64xi32>
      %68 = arith.mulf %63, %34 : tensor<128x64xf32>
      %69 = arith.select %67, %cst_2, %cst_1 : tensor<128x64xi1>, tensor<128x64xf32>
      %70 = arith.addf %68, %69 : tensor<128x64xf32>
      %71 = "tt.reduce"(%70) <{axis = 1 : i32}> ({
      ^bb0(%arg25: f32, %arg26: f32):
        %97 = arith.maxnumf %arg25, %arg26 : f32
        tt.reduce.return %97 : f32
      }) : (tensor<128x64xf32>) -> tensor<128xf32>
      %72 = arith.maxnumf %arg22, %71 : tensor<128xf32>
      %73 = tt.expand_dims %72 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32>
      %74 = tt.broadcast %73 : tensor<128x1xf32> -> tensor<128x64xf32>
      %75 = arith.subf %70, %74 : tensor<128x64xf32>
      %76 = math.exp2 %75 : tensor<128x64xf32>
      %77 = "tt.reduce"(%76) <{axis = 1 : i32}> ({
      ^bb0(%arg25: f32, %arg26: f32):
        %97 = arith.addf %arg25, %arg26 : f32
        tt.reduce.return %97 : f32
      }) : (tensor<128x64xf32>) -> tensor<128xf32>
      %78 = arith.subf %arg22, %72 : tensor<128xf32>
      %79 = math.exp2 %78 : tensor<128xf32>
      %80 = arith.mulf %arg20, %79 : tensor<128xf32>
      %81 = arith.addf %80, %77 : tensor<128xf32>
      %82 = tt.expand_dims %79 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32>
      %83 = tt.broadcast %82 : tensor<128x1xf32> -> tensor<128x64xf32>
      %84 = arith.mulf %arg21, %83 : tensor<128x64xf32>
      %85 = tt.splat %arg23 : i64 -> tensor<64xi64>
      %86 = arith.addi %85, %21 : tensor<64xi64>
      %87 = tt.expand_dims %86 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64>
      %88 = arith.muli %87, %36 : tensor<64x1xi64>
      %89 = tt.broadcast %88 : tensor<64x1xi64> -> tensor<64x64xi64>
      %90 = arith.addi %89, %37 : tensor<64x64xi64>
      %91 = tt.addptr %35, %90 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64>
      %92 = tt.load %91 : tensor<64x64x!tt.ptr<f16>>
      %93 = arith.truncf %76 : tensor<128x64xf32> to tensor<128x64xf16>
      %94 = tt.dot %93, %92, %84, inputPrecision = tf32 : tensor<128x64xf16> * tensor<64x64xf16> -> tensor<128x64xf32>
      %95 = arith.addi %arg23, %c64_i64 : i64
      %96 = arith.addi %arg24, %c64_i64 : i64
      scf.yield %81, %94, %72, %95, %96 : tensor<128xf32>, tensor<128x64xf32>, tensor<128xf32>, i64, i64
    } {tt.divisibility_arg1 = dense<64> : tensor<1xi32>}
    %39 = math.log2 %38#0 : tensor<128xf32>
    %40 = arith.addf %38#2, %39 : tensor<128xf32>
    %41 = tt.expand_dims %38#0 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32>
    %42 = tt.broadcast %41 : tensor<128x1xf32> -> tensor<128x64xf32>
    %43 = arith.divf %38#1, %42 : tensor<128x64xf32>
    %44 = arith.muli %0, %arg18 : i32
    %45 = tt.addptr %arg4, %44 : !tt.ptr<f32>, i32
    %46 = tt.splat %45 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>>
    %47 = tt.addptr %46, %12 : tensor<128x!tt.ptr<f32>>, tensor<128xi32>
    tt.store %47, %40 : tensor<128x!tt.ptr<f32>>
    %48 = arith.truncf %43 : tensor<128x64xf32> to tensor<128x64xf16>
    %49 = tt.splat %10 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>>
    %50 = tt.splat %11 : i64 -> tensor<128x1xi64>
    %51 = arith.muli %17, %50 : tensor<128x1xi64>
    %52 = tt.broadcast %51 : tensor<128x1xi64> -> tensor<128x64xi64>
    %53 = arith.addi %52, %23 : tensor<128x64xi64>
    %54 = tt.addptr %49, %53 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi64>
    tt.store %54, %48 : tensor<128x64x!tt.ptr<f16>>
    tt.return
  }
}
